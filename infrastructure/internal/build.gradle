bootJar.enabled = false
jar.enabled = true

description = 'infra 내부요소로 프레임워크과 직결되는 라이브러리만 추가한다'

dependencies {
    implementation project(':domain')
    implementation project(':usecase')
    implementation project(':infrastructure:external')

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa:5.+:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.+:jakarta'

    // mysql
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'com.h2database:h2'

    // jakarta
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

    // auth0 security
    implementation 'com.okta.spring:okta-spring-boot-starter:+'

    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // 게시판 json 글 저장용
    implementation 'com.fasterxml.jackson.core:jackson-databind:+'

    // documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:+'

    // htmx + thymeleaf support
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:+'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:+'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-java8time:+'

    implementation 'org.springframework.boot:spring-boot-starter-web'
}

def querydslDir = "${project.projectDir}/build/generated/querydsl"

sourceSets {
    main.java.srcDirs += [querydslDir]
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}