buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:+'
        classpath 'org.flywaydb:flyway-mysql:+'
    }
}

subprojects {
    group = 'blisgo'

    apply {
        plugin 'java'
        plugin 'org.springframework.boot'
        plugin 'io.spring.dependency-management'
        plugin 'jacoco'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        // componentScan
        implementation 'org.springframework.boot:spring-boot-autoconfigure'

        // configuration processor
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        // minimal boot
        implementation 'org.springframework.boot:spring-boot-starter:+'

        // spring-data-commons(ex. pageable)
        implementation 'org.springframework.data:spring-data-commons'

        // ddd hexagonal
        implementation 'org.jmolecules:jmolecules-hexagonal-architecture:+'

        // lombok
        implementation 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // modelmapper
        implementation 'org.modelmapper:modelmapper:+'
        implementation 'org.modelmapper:modelmapper-module-record:+'

        // docker
        developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

        // test
        testImplementation 'org.testcontainers:junit-jupiter'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    }

    test {
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport'
    }

    jacoco {
        toolVersion = '+'
        setReportsDirectory(file("${rootDir}/.qodana/code-coverage"))
    }

    jacocoTestReport {
        reports {
            xml.required = true
            html.required = false
        }
        finalizedBy 'jacocoTestCoverageVerification'
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                enabled = true
                element = 'CLASS'

                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.00
                }

                excludes = []
            }
        }
    }
}

