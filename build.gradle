plugins {
    id 'java'
    id 'org.springframework.boot' version '+'
    id 'org.flywaydb.flyway' version '+'
    id 'io.spring.dependency-management' version '+'
    id 'com.palantir.java-format' version '+'
    id 'jacoco-report-aggregation'
    id 'jvm-test-suite'
}

bootJar.enabled = false

repositories {
    mavenCentral()
}

subprojects {
    group = 'blisgo'

    apply {
        plugin 'java'
        plugin 'org.springframework.boot'
        plugin 'io.spring.dependency-management'
        plugin 'com.palantir.java-format'
        plugin 'jacoco-report-aggregation'
        plugin 'jvm-test-suite'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        jacocoAggregation project(":app")

        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        // componentScan
        implementation 'org.springframework.boot:spring-boot-autoconfigure'

        // configuration processor
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        // minimal boot
        implementation 'org.springframework.boot:spring-boot-starter:+'

        // spring-data-commons(ex. pageable)
        implementation 'org.springframework.data:spring-data-commons'

        // ddd hexagonal
        implementation 'org.jmolecules:jmolecules-hexagonal-architecture:+'

        // lombok
        implementation 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // modelmapper
        implementation 'org.modelmapper:modelmapper:+'
        implementation 'org.modelmapper:modelmapper-module-record:+'

        // docker
        developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

        // test
        testImplementation 'org.testcontainers:junit-jupiter'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.boot:spring-boot-testcontainers'
        testImplementation 'com.navercorp.fixturemonkey:fixture-monkey-starter:+'
        testImplementation 'com.navercorp.fixturemonkey:fixture-monkey-jackson:+'
        testImplementation 'com.navercorp.fixturemonkey:fixture-monkey-jakarta-validation:+'

        // hibernate & jakarta validator
        implementation 'org.springframework.boot:spring-boot-starter-validation'
    }

    def QDomains = []
    for (qPattern in '*.QA'..'*.QZ') {
        QDomains.add(qPattern + '*')
    }

    def jacocoExcludePatterns = [
            "**/*Application*",
            "**/*Config*",
            "**/*Exception*",
            "**/*Request*",
            "**/*Response*",
            "**/*DTO*",
            "**/*Port*",
            "**/*Command*",
            "**/*Query*",
            "**/test/**",
            "**/resources/**",
            "**/Jpa*",
            "**/*Entity",
    ]

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacoco {
        toolVersion = "+"
        setReportsDirectory(file("${rootDir}/.qodana/code-coverage"))
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            html.required = false
        }
        afterEvaluate {
            classDirectories.setFrom(
                    files(classDirectories.files.collect {
                        fileTree(dir: it, excludes: jacocoExcludePatterns + QDomains)
                    }))
        }

        finalizedBy jacocoTestCoverageVerification
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                enabled = true
                element = 'CLASS'

                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.00
                }

                excludes = []
            }
        }
    }
}

