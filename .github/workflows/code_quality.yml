name: Qodana
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main, develop

jobs:
  test-and-report:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.ACTION_TOKEN }}
          submodules: true
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'gradle'

      - name: Validate Gradle Wrapper
        run: chmod +x ./gradlew --version
        working-directory: ./

      - name: Create code coverage folder if not exists
        run: |
          mkdir -p .qodana/code-coverage
        working-directory: ./

      - name: permission
        run: chmod +x gradlew
        working-directory: ./

      - name: Run Tests
        run: ./gradlew test
        working-directory: ./

      - name: Archive coverage data
        uses: actions/upload-artifact@v2
        with:
          name: gradle-coverage-data-jacoco
          path: .qodana/code-coverage

      - name: 'Qodana Scan'
        uses: JetBrains/qodana-action@v2024.1.3
        with:
          args: --baseline,qodana.sarif.json
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: upload Qodana results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ runner.temp }}/qodana/results/qodana.sarif.json

      - name: Publish result of unit test
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: "**/build/test-results/test/TEST-*.xml"

      - name: Publish failure of unit test
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'